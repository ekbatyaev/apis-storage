// src/something_2.js - –†–∞–±–æ—á–∞—è –≤–µ—Ä—Å–∏—è —Å AnimeChan API
console.log('quotes.js –∑–∞–≥—Ä—É–∂–µ–Ω!');

class QuotesManager {
    constructor() {
        this.quotes = [];
        this.currentQuote = null;
        this.init();
    }

    init() {
        console.log('–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ–Ω–µ–¥–∂–µ—Ä–∞ —Ü–∏—Ç–∞—Ç...');
        
        // –ù–∞—Ö–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã DOM
        this.newQuoteBtn = document.getElementById('new-quote-btn');
        this.animeSelect = document.getElementById('anime-select');
        this.quoteContainer = document.getElementById('quote-container');
        
        if (!this.checkElements()) return;
        
        this.setupEventListeners();
        this.loadRandomQuote();
        
        console.log('–ú–µ–Ω–µ–¥–∂–µ—Ä —Ü–∏—Ç–∞—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω');
    }

    checkElements() {
        if (!this.newQuoteBtn || !this.animeSelect || !this.quoteContainer) {
            console.error('–ù–µ –Ω–∞–π–¥–µ–Ω—ã —ç–ª–µ–º–µ–Ω—Ç—ã DOM:', {
                newQuoteBtn: !!this.newQuoteBtn,
                animeSelect: !!this.animeSelect, 
                quoteContainer: !!this.quoteContainer
            });
            return false;
        }
        return true;
    }

    setupEventListeners() {
        this.newQuoteBtn.addEventListener('click', () => this.loadRandomQuote());
        this.animeSelect.addEventListener('change', () => this.loadRandomQuote());
    }

    async loadRandomQuote() {
        console.log('–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã...');
        
        try {
            this.showLoading();
            
            const selectedAnime = this.animeSelect.value;
            let quote;
            
            if (selectedAnime) {
                quote = await this.getQuoteByAnime(selectedAnime);
            } else {
                quote = await this.getRandomQuote();
            }
            
            this.displayQuote(quote, true);
            
        } catch (error) {
            console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ü–∏—Ç–∞—Ç—ã:', error);
            this.displayBackupQuote();
        }
    }

    // –û—Å–Ω–æ–≤–Ω–æ–π –º–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã
    async getRandomQuote() {
        console.log('–ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ª—É—á–∞–π–Ω–æ–π —Ü–∏—Ç–∞—Ç—ã –∏–∑ AnimeChan...');
        
        // –ü—Ä–æ–±—É–µ–º —Ä–∞–∑–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã URL AnimeChan
        const urls = [
            'https://animechan.xyz/api/random',
            'https://animechan.io/api/v1/random',
            'https://animechan.vercel.app/api/random',
            'https://api.animechan.io/v1/quotes/random'
        ];
        
        for (const url of urls) {
            try {
                console.log(`–ü—Ä–æ–±—É–µ–º URL: ${url}`);
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                    },
                    mode: 'cors'
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const quote = await response.json();
                console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞:', quote);
                return quote;
                
            } catch (error) {
                console.warn(`URL ${url} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
                continue;
            }
        }
        
        throw new Error('–í—Å–µ URL AnimeChan –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã');
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–∏—Ç–∞—Ç –ø–æ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–º—É –∞–Ω–∏–º–µ
    async getQuoteByAnime(animeTitle) {
        console.log(`–ü–æ–∏—Å–∫ —Ü–∏—Ç–∞—Ç –¥–ª—è –∞–Ω–∏–º–µ: ${animeTitle}`);
        
        const urls = [
            `https://animechan.xyz/api/quotes/anime?title=${encodeURIComponent(animeTitle)}`,
            `https://animechan.io/api/v1/quotes?anime=${encodeURIComponent(animeTitle)}`,
            `https://animechan.vercel.app/api/quotes/anime?title=${encodeURIComponent(animeTitle)}`,
            `https://api.animechan.io/v1/quotes/anime?title=${encodeURIComponent(animeTitle)}`
        ];
        
        for (const url of urls) {
            try {
                console.log(`–ü—Ä–æ–±—É–µ–º URL: ${url}`);
                const response = await fetch(url, {
                    method: 'GET',
                    headers: {
                        'Accept': 'application/json',
                    }
                });
                
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                
                const quotes = await response.json();
                
                if (!quotes || quotes.length === 0) {
                    throw new Error(`–ù–µ –Ω–∞–π–¥–µ–Ω–æ —Ü–∏—Ç–∞—Ç –¥–ª—è –∞–Ω–∏–º–µ "${animeTitle}"`);
                }
                
                // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é —Ü–∏—Ç–∞—Ç—É –∏–∑ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
                const randomIndex = Math.floor(Math.random() * quotes.length);
                const quote = Array.isArray(quotes) ? quotes[randomIndex] : quotes;
                console.log('–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω–∞ —Ü–∏—Ç–∞—Ç–∞:', quote);
                return quote;
                
            } catch (error) {
                console.warn(`URL ${url} –Ω–µ —Å—Ä–∞–±–æ—Ç–∞–ª:`, error.message);
                continue;
            }
        }
        
        throw new Error(`–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Ü–∏—Ç–∞—Ç—ã –¥–ª—è –∞–Ω–∏–º–µ "${animeTitle}"`);
    }

    showLoading() {
        this.quoteContainer.innerHTML = `
            <div class="loading">
                <div class="spinner"></div>
                <p>üîÑ –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ AnimeChan API...</p>
            </div>
        `;
    }

    displayQuote(quote, fromApi = true) {
        console.log('–û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ü–∏—Ç–∞—Ç—ã:', quote);
        
        if (!quote || !quote.quote) {
            throw new Error('–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ —Ü–∏—Ç–∞—Ç—ã');
        }
        
        const sourceInfo = fromApi ? 
            '<p class="api-success">‚úÖ –¶–∏—Ç–∞—Ç–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–∞ –∏–∑ AnimeChan API</p>' :
            '<p class="api-warning">‚ö†Ô∏è –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ª–æ–∫–∞–ª—å–Ω–∞—è —Ü–∏—Ç–∞—Ç–∞</p>';
        
        this.quoteContainer.innerHTML = `
            <div class="quote-content">
                <div class="quote-text">"${this.escapeHtml(quote.quote)}"</div>
                <div class="quote-author">‚Äî ${this.escapeHtml(quote.character)}</div>
                <div class="quote-anime">–∏–∑ –∞–Ω–∏–º–µ "${this.escapeHtml(quote.anime)}"</div>
                ${sourceInfo}
                <div class="quote-actions">
                    <button onclick="quotesManager.loadRandomQuote()" class="secondary-btn">
                        üîÑ –ï—â–µ —Ü–∏—Ç–∞—Ç–∞
                    </button>
                </div>
            </div>
        `;
        
        this.currentQuote = quote;
    }

    displayBackupQuote() {
        console.log('–ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é —Ü–∏—Ç–∞—Ç—É');
        
        const backupQuotes = [
            {
                quote: "–¢–æ—Ç, –∫—Ç–æ –Ω–µ –º–æ–∂–µ—Ç –ø–æ–∂–µ—Ä—Ç–≤–æ–≤–∞—Ç—å –≤—Å–µ–º, –Ω–µ —Å–º–æ–∂–µ—Ç –Ω–∏—á–µ–≥–æ –∏–∑–º–µ–Ω–∏—Ç—å.",
                character: "–ê—Ä–º–∏–Ω –ê—Ä–ª–µ—Ä—Ç",
                anime: "Attack on Titan"
            },
            {
                quote: "–°–∏–ª–∞ –Ω–µ –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –∫—Ç–æ –ø—Ä–∞–≤, –∞ –∫—Ç–æ –Ω–µ—Ç.",
                character: "–ú–æ–Ω–∫–∏ –î. –õ—É—Ñ—Ñ–∏", 
                anime: "One Piece"
            },
            {
                quote: "–ù–∞—Å—Ç–æ—è—â–∞—è —Å–∏–ª–∞ –ø—Ä–∏—Ö–æ–¥–∏—Ç –Ω–µ –æ—Ç –Ω–µ–Ω–∞–≤–∏—Å—Ç–∏, –∞ –æ—Ç –∑–∞—â–∏—Ç—ã —Ç–µ—Ö, –∫–æ–≥–æ –ª—é–±–∏—à—å.",
                character: "–ù–∞—Ä—É—Ç–æ –£–∑—É–º–∞–∫–∏",
                anime: "Naruto"
            },
            {
                quote: "–ï—Å–ª–∏ —Ç—ã –Ω–µ –±—É–¥–µ—à—å —É–ø–æ—Ä–Ω–æ —Ç—Ä—É–¥–∏—Ç—å—Å—è, —Ç–æ –Ω–µ —Å–º–æ–∂–µ—à—å –ø–æ–±–µ–¥–∏—Ç—å –≥–µ–Ω–∏—è.",
                character: "–°–∞–∫—É—Ä–∞–≥–∏ –ö–æ–±–∞—è—à–∏",
                anime: "Baby Steps"
            }
        ];
        
        const randomQuote = backupQuotes[Math.floor(Math.random() * backupQuotes.length)];
        this.displayQuote(randomQuote, false);
    }

    escapeHtml(text) {
        if (!text) return '';
        const div = document.createElement('div');
        div.textContent = text;
        return div.innerHTML;
    }
}

// –°–æ–∑–¥–∞–µ–º —Å—Ç–∏–ª–∏ –¥–ª—è —Å–ø–∏–Ω–Ω–µ—Ä–∞ –∏ –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä–æ–≤
function createCustomStyles() {
    if (document.getElementById('quotes-styles')) return;
    
    const style = document.createElement('style');
    style.id = 'quotes-styles';
    style.textContent = `
        .spinner {
            border: 3px solid #f3f3f3;
            border-top: 3px solid #ff6b9d;
            border-radius: 50%;
            width: 40px;
            height: 40px;
            animation: spin 1s linear infinite;
            margin: 0 auto 1rem;
        }
        
        @keyframes spin {
            0% { transform: rotate(0deg); }
            100% { transform: rotate(360deg); }
        }
        
        .api-success {
            color: #28a745;
            font-size: 0.9rem;
            margin-top: 1rem;
            padding: 0.5rem;
            background: #f8fff9;
            border-radius: 5px;
            border: 1px solid #28a745;
        }
        
        .api-warning {
            color: #ffc107;
            font-size: 0.9rem;
            margin-top: 1rem;
            padding: 0.5rem;
            background: #fffef0;
            border-radius: 5px;
            border: 1px solid #ffc107;
        }
        
        .quote-actions {
            margin-top: 1.5rem;
            text-align: center;
        }
        
        .loading {
            text-align: center;
            padding: 2rem;
        }
        
        .loading p {
            margin: 0;
            color: #666;
        }
    `;
    document.head.appendChild(style);
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', () => {
    console.log('DOM –∑–∞–≥—Ä—É–∂–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º QuotesManager...');
    createCustomStyles();
    window.quotesManager = new QuotesManager();
});